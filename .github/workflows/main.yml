name: Deploy PHP Website to Server

on:
  push:
    branches:
      - main # Or your deployment branch

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Display Remote Path for Debugging
        run: |
          echo "Remote WWW Path from secret is: '${{ secrets.REMOTE_WWW_PATH }}'"
          echo "Attempting to list remote directory contents..."
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} "ls -ld ${{ secrets.REMOTE_WWW_PATH }}" || echo "Failed to list remote directory or path does not exist."
          echo "Current groups for SSH user on remote:"
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} "groups"

      - name: Deploy files via rsync (with modified options for debugging)
        run: |
          echo "Current local directory:"
          pwd
          ls -la
          echo "---"
          echo "Executing rsync command..."
          set -x # Print the exact command being run

          # Try without -o and -g (owner/group preservation) initially to simplify
          # and use --no-super to prevent issues if the remote user cannot set all attributes
          rsync -rtvz --delete --no-super \
            --exclude '.git*' \
            --exclude '.github' \
            --exclude 'README.md' \
            --exclude '.vscode' \
            ./ ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:${{ secrets.REMOTE_WWW_PATH }}/
          # -r: recursive
          # -t: preserve modification times
          # -v: verbose
          # -z: compress
          # --no-super: receiver will not attempt super-user activities

      - name: Set Permissions on Server
        if: success()
        run: |
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} << EOF
            echo "Setting permissions on the server..."
            echo "Target directory: ${{ secrets.REMOTE_WWW_PATH }}"
            
            # If Option 2 was fully implemented (SSH user in 'www' group, target dir owned by www:www and 775)
            # Files created by rsync (run by SSH_USER) will be owned by SSH_USER:PRIMARY_GROUP_OF_SSH_USER.
            # We need them to be group 'www' and group-writable for PHP.

            echo "Changing group to 'www' for all files/dirs..."
            sudo chgrp -R www ${{ secrets.REMOTE_WWW_PATH }} || echo "chgrp failed, check sudo permissions for user ${{ secrets.SERVER_USERNAME }}"
            
            echo "Setting directory permissions to 775 (rwxrwxr-x)..."
            find ${{ secrets.REMOTE_WWW_PATH }} -type d -exec sudo chmod 775 {} \; || echo "chmod for directories failed"
            
            echo "Setting file permissions to 664 (rw-rw-r--)..."
            find ${{ secrets.REMOTE_WWW_PATH }} -type f -exec sudo chmod 664 {} \; || echo "chmod for files failed"
            
            if [ -d "${{ secrets.REMOTE_WWW_PATH }}/data" ]; then
              echo "Ensuring 'data' directory permissions..."
              sudo chgrp -R www ${{ secrets.REMOTE_WWW_PATH }}/data || echo "chgrp for data dir failed"
              sudo chmod -R 775 ${{ secrets.REMOTE_WWW_PATH }}/data || echo "chmod for data dir failed"
            else
              echo "Warning: 'data' directory not found for permission check."
            fi
            
            echo "Permissions script finished."
          EOF
          
    outputs:
      deployment_status: ${{ job.status }}
