name: Deploy PHP Website to Server

on:
  push:
    branches:
      - main # Or your deployment branch, e.g., master, production

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy files via rsync
        run: |
          # The -a flag in rsync attempts to preserve permissions.
          # If your SSH_USER is part of the 'www' group, and 'www' group has write permissions
          # on the REMOTE_WWW_PATH, this should work.
          # Rsync will create files owned by SSH_USER:primary_group_of_SSH_USER.
          # The subsequent permissions step ensures the 'www' group can still manage them if needed.
          rsync -avz --delete \
            --exclude '.git*' \
            --exclude '.github' \
            --exclude 'README.md' \
            --exclude '.vscode' \
            # Add any other files or directories to exclude
            ./ ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:${{ secrets.REMOTE_WWW_PATH }}/

      - name: Set Permissions on Server
        if: success() # Only run if rsync was successful
        run: |
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} << EOF
            echo "Setting permissions on the server..."
            echo "Target directory: ${{ secrets.REMOTE_WWW_PATH }}"
            
            # Since your SSH user ( ${{ secrets.SERVER_USERNAME }} ) is now part of the 'www' group,
            # and assuming the files were created by this user during rsync,
            # we need to ensure the 'www' group (which PHP/webserver runs as) has appropriate access.
            
            # 1. Ensure correct ownership (owner: your SSH user, group: www)
            #    Files synced by rsync are typically owned by the SSH user.
            #    If they are not already group 'www', you might need to change group ownership.
            #    However, if your SSH user's primary group IS 'www' or if rsync preserves source group
            #    and source group is 'www', this might not be needed.
            #    Forcing group to 'www' ensures consistency for the web server.
            #    The 'sudo' is needed if your SSH user cannot chgrp files to 'www' group directly.
            #    If your SSH user's primary group is 'www', then 'sudo' for chgrp might not be needed.
            sudo chgrp -R www ${{ secrets.REMOTE_WWW_PATH }}
            
            # 2. Set directory permissions: owner=rwx, group=rwx, other=rx (775)
            #    This allows your SSH user and the 'www' group (webserver) to manage.
            echo "Setting directory permissions to 775 (rwxrwxr-x)..."
            find ${{ secrets.REMOTE_WWW_PATH }} -type d -exec sudo chmod 775 {} \;
            
            # 3. Set file permissions: owner=rw, group=rw, other=r (664)
            #    This allows your SSH user and the 'www' group (webserver) to read/write.
            echo "Setting file permissions to 664 (rw-rw-r--)..."
            find ${{ secrets.REMOTE_WWW_PATH }} -type f -exec sudo chmod 664 {} \;
            
            # 4. Specific check for the 'data' directory to ensure it's definitely writable
            #    by the 'www' group for PHP processes.
            #    The above 775 on directories and 664 on files should cover it if group is 'www'.
            if [ -d "${{ secrets.REMOTE_WWW_PATH }}/data" ]; then
              echo "Verifying 'data' directory permissions at ${{ secrets.REMOTE_WWW_PATH }}/data..."
              # Ensure 'data' directory and its contents are group 'www' and group-writable
              sudo chgrp -R www ${{ secrets.REMOTE_WWW_PATH }}/data
              sudo chmod -R 775 ${{ secrets.REMOTE_WWW_PATH }}/data # rwxrwxr-x
              # If files inside data need to be different (e.g. 664), apply separately:
              # find ${{ secrets.REMOTE_WWW_PATH }}/data -type f -exec sudo chmod 664 {} \;
            else
              echo "Warning: 'data' directory not found at ${{ secrets.REMOTE_WWW_PATH }}/data for permission check."
            fi
            
            echo "Permissions script finished. Review server logs if issues persist."
          EOF
          
    outputs:
      deployment_status: ${{ job.status }}
